<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data650 on Academic</title>
    <link>/tags/data650/</link>
    <description>Recent content in Data650 on Academic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Heidi Beezub</copyright>
    <lastBuildDate>Sun, 24 Sep 2017 00:00:00 -0400</lastBuildDate>
    <atom:link href="/tags/data650/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Blog 2017-09-24 Data Visualization (blog#2)</title>
      <link>/post/blog-2017-09-24/</link>
      <pubDate>Sun, 24 Sep 2017 00:00:00 -0400</pubDate>
      
      <guid>/post/blog-2017-09-24/</guid>
      <description>&lt;p&gt;OK so this is attempt 3 for this blog post.  We&amp;rsquo;re (that would be the royal we-I don&amp;rsquo;t have a mouse in my pocket) going to get the text up &amp;amp; then work from there.&lt;/p&gt;

&lt;p&gt;We used R-studio to create a scatter plot of baseball information (from the Lahman library).  Aside from learning how to do the scatter plot, the most interesting thing I learned is that the &amp;ldquo;css&amp;rdquo; that I keep seeing in the sample blog has to do with viewing the HTML information.  I had been wondering what all of them were (and now I know)&lt;/p&gt;

&lt;p&gt;I. Our first step was to open r-studio and install all the packages we would need and then bring them all in with &amp;lsquo;library&amp;rsquo;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lahman&lt;/li&gt;
&lt;li&gt;dplyr&lt;/li&gt;
&lt;li&gt;ggplot2&lt;/li&gt;
&lt;li&gt;ggiraph: which is the HTML widget (no clue what that means-but let&amp;rsquo;s move on)&lt;/li&gt;
&lt;li&gt;so I figued out how to make the bullet points above by adding a space after the dash
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;II. We pulled some interesting information: players with more than 400 career Home runs, but we also wanted to know the number of strikeouts too.  We used the following code:&lt;/p&gt;

&lt;p&gt;Batting %&amp;gt;%
  group_by(playerID)%&amp;gt;%
  summarize(career_HR=sum(HR), career_SO=sum(SO))%&amp;gt;%
  filter(career_HR &amp;gt;=400)&lt;/p&gt;

&lt;p&gt;Since we will be using this information to create graph, we want to define it as a table.  The table name is df.  we put a &amp;lsquo;df&amp;lt;-&amp;rsquo; (the carrot &amp;amp; dash make a little arrow) before &amp;lsquo;batting&amp;rsquo; and then after the code close/end the table with another &amp;lsquo;df&amp;rsquo; a space below.&lt;/p&gt;

&lt;p&gt;III. We then created our graph using ggplot, in the same way that the &amp;lsquo;%&amp;gt;%&amp;rsquo; is the continuation character for r markdown, the &amp;lsquo;+&amp;rsquo; is the continuation character for  ggplot.  the &amp;lsquo;aes&amp;rsquo; (asthetic) is for the xy axis.  The geom_point indicates we want a scatter plot (points).  If we wanted some other type, like a bar chart we would use geom_bar.  ggtitle gives our graph it&amp;rsquo;s name, and the xlab &amp;amp; ylab (label) give the axes names.&lt;/p&gt;

&lt;p&gt;ggplot()+
  geom_point_interactive(data=HR_vs_SO,aes(x=career_SO,y=career_HR))+
  ggtitle(&amp;ldquo;career Homeruns vs. Strikeouts for great hitters&amp;rdquo;)+
  xlab(&amp;ldquo;Career Strikeouts&amp;rdquo;)+
  ylab(&amp;ldquo;Career Homeruns&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;again we want to &amp;lsquo;save&amp;rsquo; this so we name it (like we did the batting information) &amp;lsquo;g&amp;lt;-&amp;rsquo; before ggplot.&lt;/p&gt;

&lt;p&gt;This gives us a nice visual, but we don&amp;rsquo;t know what (or rather who) the points represent.&lt;/p&gt;

&lt;p&gt;IV. So we use colnames(master) to find out the table names in the Lahman information.  Now we want to &amp;lsquo;paste&amp;rsquo; together the first &amp;amp; last names.  The following code is added to the &amp;lsquo;Batting&amp;rsquo; code to show the first &amp;amp; last names:&lt;/p&gt;

&lt;p&gt;HR_vs_SO&amp;lt;-inner_join(df,Master,by=c(&amp;lsquo;playerID&amp;rsquo;))%&amp;gt;%
  select(nameFirst,nameLast,career_HR,career_SO)&lt;/p&gt;

&lt;p&gt;HR_vs_SO$name&amp;lt;-paste(HR_vs_so$nameFirst, HR_vs_so$nameLast)&lt;/p&gt;

&lt;p&gt;&amp;lsquo;V.&amp;rsquo; Now we add a little more code we define the name as a tool tip &amp;amp; modify our gg plot code so that as we hover over our points, we get the names:&lt;/p&gt;

&lt;p&gt;geom_point_interactive(data=HR_vs_SO,aes(x=career_SO,y=career_HR,tooltip=name, data_id=nameLast))&lt;/p&gt;

&lt;p&gt;VI.Ok, so the final code looks like this:&lt;/p&gt;

&lt;p&gt;df&amp;lt;-Batting %&amp;gt;%
  group_by(playerID)%&amp;gt;%
  summarize(career_HR=sum(HR), career_SO=sum(SO))%&amp;gt;%
  filter(career_HR &amp;gt;=400)&lt;/p&gt;

&lt;p&gt;df&lt;/p&gt;

&lt;p&gt;HR_vs_SO&amp;lt;-inner_join(df,Master,by=c(&amp;lsquo;playerID&amp;rsquo;))%&amp;gt;%
  select(nameFirst,nameLast,career_HR,career_SO)&lt;/p&gt;

&lt;p&gt;HR_vs_SO$name&amp;lt;-paste(HR_vs_so$nameFirst, HR_vs_so$nameLast)&lt;/p&gt;

&lt;p&gt;HR_vs_SO
#&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/p&gt;

&lt;p&gt;g&amp;lt;-ggplot()+
  geom_point_interactive(data=HR_vs_SO,aes(x=career_SO,y=career_HR,tooltip=name, data_id=nameLast))+
  ggtitle(&amp;ldquo;career Homeruns vs. Strikeouts for great hitters&amp;rdquo;)+
  xlab(&amp;ldquo;Career Strikeouts&amp;rdquo;)+
  ylab(&amp;ldquo;Career Homeruns&amp;rdquo;)+&lt;/p&gt;

&lt;p&gt;HR_vs_SO$name&amp;lt;-paste(HR_vs_so$nameFirst,HR_vs_so$nameLast)&lt;/p&gt;

&lt;p&gt;ggiraph(code=print(g),hover_css = &amp;ldquo;fill:white;stroke:black&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;Note: I&amp;rsquo;m using Roman numerals because when I tried &amp;lsquo;1,2&amp;rsquo;3&amp;rdquo; it made them all  &amp;ldquo;1&amp;rdquo;.  I found some info on line about &amp;ldquo;ordered lists&amp;rdquo; in HTML, but I&amp;rsquo;m not sure how to insert it into the HTML file (I think it will go in the public/post/index.html file.  I&amp;rsquo;m going to need to find out a little bit more to be sure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>blog 2017-09-21 -My first blog</title>
      <link>/post/getting-started/</link>
      <pubDate>Thu, 21 Sep 2017 00:00:00 -0400</pubDate>
      
      <guid>/post/getting-started/</guid>
      <description>

&lt;p&gt;So instead of being able to create a website in an hour, so far I&amp;rsquo;ve spent 8 (over 2 days).  I keep getting errors!!!!!  Hopefully I will have it now.  My goal will be to change one thing (file) and worry about any other changes tomorrow.     Tomorrow, tomorrow, there&amp;rsquo;s always tomorrow&amp;hellip;&lt;/p&gt;

&lt;p&gt;OK so now instead of being able to comment out the table of contents it just added the &amp;lt;!- (not even a second dash).&lt;/p&gt;

&lt;p&gt;Now I am REALLY irritated that this is not working.&lt;/p&gt;

&lt;p&gt;Alright, I got MOST of it gone (another 30 minutes of my life).&lt;/p&gt;

&lt;p&gt;Key features:&lt;/p&gt;

&lt;p&gt;I like this simple design with the bold colors&lt;/p&gt;

&lt;!-- &lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;

 
## Installation

1. [Install Hugo](https://georgecushen.com/create-your-website-with-hugo/#installing-hugo) and create a new website by typing the following commands in your *Terminal* or *Command Prompt* app:

        hugo new site my_website
        cd my_website
 
2. Install Academic with [git](https://help.github.com/articles/set-up-git/):

        git clone https://github.com/gcushen/hugo-academic.git themes/academic

    Or alternatively, [download Academic](https://github.com/gcushen/hugo-academic/archive/master.zip) and extract it into a `themes/academic` folder within your Hugo website.

3. If you are creating a new website, copy the contents of the `exampleSite` folder to your website root folder, overwriting existing files if necessary. The `exampleSite` folder contains an example config file and content to help you get started.

        cp -av themes/academic/exampleSite/* .

4. Start the Hugo server from your website root folder:

        hugo server --watch

    Now you can go to [localhost:1313](http://localhost:1313) and your new Academic powered website should appear.

5. Customize your website - refer to the *Getting Started* section below

6. Build your site by running the `hugo` command. Then [host it for free using Github Pages](https://georgecushen.com/create-your-website-with-hugo/). Or alternatively, copy the generated `public/` directory (by FTP, Rsync, etc.) to your production web server (such as your university&#39;s hosting service).


## Getting Started

Assuming you created a new website with the example content following the installation steps above, this section explores just a few more steps in order to customize it.

### Core parameters

The core parameters for the website can be edited in the `config.toml` configuration file:

- Set `baseurl` to your website URL (we recommend [GitHub Pages](https://georgecushen.com/create-your-website-with-hugo/) for free hosting)
- Set `title` to your desired website title such as your name
- The example Disqus commenting variable should be cleared (e.g. `disqusShortname = &#34;&#34;`) or set to your own [Disqus](https://disqus.com/) shortname to enable commenting
- Edit your details under `[params]`; these will be displayed mainly in the homepage *about* and *contact* widgets (if used). To disable a contact field, simply clear the value to `&#34;&#34;`. 
- Place a square cropped portrait photo named `portrait.jpg` into the `static/img/` folder, overwriting any defaults. Alternatively, you can edit the `avatar` filepath to point to a different image name or clear the value to disable the avatar feature.
- To enable LaTeX math for your site, set `math = true`
- Social/academic networking links are defined as multiples of `[[params.social]]`. They can be created or deleted as necessary.

### Introduce yourself

Edit your biography in the *about* widget `content/home/about.md` that you copied across from the `themes/academic/exampleSite/` folder. The research interests and qualifications are stored as `interests` and `education` variables. The academic qualifications are defined as multiples of `[[education.courses]]` and can be created or deleted as necessary. It&#39;s possible to completely hide the interests and education lists by deleting their respective variables.

### Customize the homepage

Refer to our guide on using [widgets](/post/widgets/) to customize your homepage.

### Add your content

Refer to our guide on [managing content](/post/managing-content/) to create your own publications, blog posts, talks, and projects.

### Remove unused widgets and pages

[How to remove unused widgets and content pages](/post/managing-content/#removing-content).

### Customization &amp; Upgrading

Continue reading below for advanced customization tips and instructions for keeping the framework up-to-date with any improvements that become available.


## Advanced customization

It is possible to carry out many customizations without touching any files in `themes/academic`, making it easier to upgrade the framework in the future.

### Navigation menu

The `[[menu.main]]` entries towards the bottom of `config.toml` define the navigation links at the top of the website. They can be added or removed as desired.

To create a dropdown sub-menu, add `identifier = &#34;something&#34;` to the parent item and `parent = &#34;something&#34;` to the child item.

### Website icon

Save your main icon and mobile icon as square PNG images named `icon.png` and `apple-touch-icon.png`, respectively. Place them in your root `static/img/` folder.

### Theme color (CSS)

You can link custom CSS assets (relative to your root `static/css`) from your `config.toml` using `custom_css = [&#34;custom.css&#34;]`.

For example, lets make a green theme. First, define `custom_css = [&#34;green.css&#34;]` in `config.toml`. Then we can download the example [green theme](https://gist.github.com/gcushen/d5525a4506b9ccf83f2bce592a895495) and save it as `static/css/green.css`, relative to your website root (i.e. **not** in the `themes` directory).

### Analytics

To enable [Google Analytics](http://www.google.com/analytics), add your tracking code in `config.toml` similarly to `googleAnalytics = &#34;UA-12345678-9&#34;`.

### Third party and local scripts (JS)

To add a third party script, create a file named `head_custom.html` in a `layouts/partials/` folder at the root of your website (not in the `themes` folder). Any HTML code added to this file will be included within your website&#39;s `&lt;head&gt;`. Therefore, it&#39;s suitable for adding custom metadata or third party scripts specified with the *async* attribute.

Whereas for your own local scripts, you can link your local JS assets (relative to your root `static/js`) from your `config.toml` using `custom_js  = [&#34;custom.js&#34;]`.

### Language and translation

The interface text (e.g. buttons) is stored in language files which are collected from Academic&#39;s `themes/academic/i18n/` folder, as well as an `i18n/` folder at the root of your project.

To edit the interface text, copy `themes/academic/i18n/en.yaml` to `i18n/en.yaml` (relative to the root of your website). Open the new file and make any desired changes to the text appearing after `translation:`. Note that the language files are formatted in YAML syntax.

To translate the interface text to another language, follow the above instructions, but name the new file in the form `i18n/X.yaml` where `X` is the appropriate [ISO/RFC5646 language identifier](http://www.w3schools.com/tags/ref_language_codes.asp) for the translation. Then follow the brief instructions in the *Language* section at the bottom of your `config.toml`. To change the default language used by Academic, set `defaultContentLanguage` to the desired language identifier in your configuration file.

To translate the navigation bar, you can edit the default `[[menu.main]]` instances in `config.toml`. However, for a multilingual site, you will need to duplicate all of the `[[menu.main]]` instances and rename the new instances from `[[menu.main]]` to `[[Languages.X.menu.main]]`, where `X` is the language identifier (e.g. `[[Languages.zh.menu.main]]` for Simplified Chinese). Thus, the navigation bar can be displayed in multiple languages.

To translate a content file in your `content/` folder into another language, copy the file to `filename.X.md` where `filename` is your existing filename and `X` is the appropriate [ISO/RFC5646 language identifier](http://www.w3schools.com/tags/ref_language_codes.asp) for the translation. Then translate the content in the new file to the specified language.

For further details on Hugo&#39;s internationalization and multilingual features, refer to the [associated Hugo documentation](https://gohugo.io/content/multilingual/).

### Permalinks

*Permalinks*, or *permanent links*, are URLs to individual pages and posts on your website. They are permanent web addresses which can be used to link to your content. Using Hugo&#39;s *permalinks* option these can be easily customized. For example, the blog post URL can be changed to the form *yourURL/2016/05/01/my-post-slug* by adding the following near the top of your `config.toml` (before `[params]` settings):

    [permalinks]
        post = &#34;/:year/:month/:day/:slug&#34;

Where `:slug` defaults to the filename of the post, excluding the file extension. However, slug may be overridden on a per post basis if desired, simply by setting `slug = &#34;my-short-post-title&#34;` in your post preamble.


## Upgrading

Feel free to *star* the project on [Github](https://github.com/gcushen/hugo-academic/) and monitor the [commits](https://github.com/gcushen/hugo-academic/commits/master) for updates.

Before upgrading the framework, it is recommended to make a backup of your entire website directory, or at least your `themes/academic` directory. You can also read about the [most recent milestones](https://github.com/gcushen/hugo-academic/releases) (but this doesn&#39;t necessarily reflect the latest *master* release).

Before upgrading for the first time, the remote *origin* repository should be renamed to *upstream*:

    $ cd themes/academic
    $ git remote rename origin upstream

To list available updates:

    $ cd themes/academic
    $ git fetch upstream
    $ git log --pretty=oneline --abbrev-commit --decorate HEAD..upstream/master

Then, upgrade by running:

    $ git pull upstream

If you have modified files in `themes/academic`, git will attempt to auto-merge changes. If conflicts are reported, you will need to manually edit the files with conflicts and add them back (`git add &lt;filename&gt;`).

If there are any issues after upgrading, you may wish to compare your site with the latest [example site](https://github.com/gcushen/hugo-academic/tree/master/exampleSite) to check if any settings changed.


## Feedback &amp; Contributing

Please use the [issue tracker](https://github.com/gcushen/hugo-academic/issues) to let me know about any bugs or feature requests, or alternatively make a pull request.

For general questions about Hugo, there is a [Hugo discussion forum](http://discuss.gohugo.io).

 --&gt;

&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;Copyright 2016 &lt;a href=&#34;https://georgecushen.com&#34; target=&#34;_blank&#34;&gt;George Cushen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/gcushen/hugo-academic/blob/master/LICENSE.md&#34; target=&#34;_blank&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
